#version 460 core
#extension GL_ARB_compute_shader:           enable
#extension GL_ARB_shader_storage_buffer_object:     enable
#extension GL_ARB_compute_variable_group_size : enable
#define MAX_LIGHT_COUNT 1024
#define SCREEN_WIDTH 1280
#define SCREEN_HEIGHT 720
#define WORK_GROUP_SIZE 16
#define NUM_GROUPS_X (SCREEN_WIDTH / WORK_GROUP_SIZE)
#define NUM_GROUPS_Y (SCREEN_HEIGHT / WORK_GROUP_SIZE)

layout(std140, binding = 0) uniform BufferTransform
{
	mat4 projection;
	mat4 view;
};

struct Light {
    vec3 position;
	float radius;
    vec3 diffuse;
	float linear;
	float quadratic;
};

layout(std430, binding = 1) buffer BufferLight
{
	int countLight;
	Light lights[];
};

layout(std430, binding = 2) buffer BufferLightVisible
{ 
     int lightVisible[];
};

layout(rgba32f, binding = 4) uniform image2D img_output;

layout (binding = 0) uniform sampler2D gDepth; 

shared uint minDepthInt;
shared uint maxDepthInt;
shared uint visibleLightCount;
shared vec4 frustumPlanes[4];
shared int visibleLightIndices[MAX_LIGHT_COUNT];
shared mat4 viewProjection;
const vec2 screenSize = vec2(SCREEN_WIDTH, SCREEN_HEIGHT);

layout( local_size_variable ) in;

vec4 createPlaneEquation(vec3 Q, vec3 R)
{
	return vec4(normalize(cross(Q, R)), 0);
}

vec3 projToView(vec4 clip)
{
	clip = inverse(projection) * clip;
	return (clip / clip.w).xyz;
}

vec3 screenToView(vec4 screen)
{
	vec2 UV = vec2(screen) / screenSize;
	vec4 clip = vec4(vec2(UV.x, UV.y) * 2.0 - 1.0, screen.z, screen.w);
	return projToView(clip);
}

float getSignedDistFromPlane(vec3 p, vec4 enq)
{
	return dot(enq.xyz, p);
}

void main()
{
	ivec2 location = ivec2(gl_GlobalInvocationID.xy);
	ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
	uint index = tileID.y * tileNumber.x + tileID.x;

	if(gl_LocalInvocationIndex == 0)
	{
		minDepthInt = 0xFFFFFFFF;
		maxDepthInt = 0;
		visibleLightCount = 0;
		viewProjection = projection * view;
	}
	
	barrier();
	
	float maxDepth, minDepth;
	vec2 UV = vec2(location) / screenSize;
	float depth = texture(gDepth, UV).r;
	//depth = (0.5 * projection[3][2]) / (depth + 0.5 * projection[2][2] - 0.5);
	depth = screenToView(vec4(location.x, location.y, depth, 1.0)).z;
 
	uint depthuInt = floatBitsToUint(depth);
	atomicMin(minDepthInt, depthuInt);
	atomicMax(maxDepthInt, depthuInt);

	barrier();

	if (gl_LocalInvocationIndex == 0) {
		minDepth = uintBitsToFloat(minDepthInt);
		maxDepth = uintBitsToFloat(maxDepthInt);

		vec2 negativeStep = (vec2(tileID)) * vec2(WORK_GROUP_SIZE);
		vec2 positiveStep = (vec2(tileID + ivec2(1, 1))) * vec2(WORK_GROUP_SIZE);
		vec2 size = vec2(tileNumber.x, tileNumber.y) * WORK_GROUP_SIZE;

		vec3 p[4];
		p[0] = projToView(vec4(negativeStep.x / size.x * 2.0 - 1.0, (size.y - negativeStep.y) / size.y * 2.0 - 1.0, 1.0, 1.0));
		p[1] = projToView(vec4(positiveStep.x / size.x * 2.0 - 1.0, (size.y - negativeStep.y) / size.y * 2.0 - 1.0, 1.0, 1.0));
		p[2] = projToView(vec4(positiveStep.x / size.x * 2.0 - 1.0, (size.y - positiveStep.y) / size.y * 2.0 - 1.0, 1.0, 1.0));
		p[3] = projToView(vec4(negativeStep.x / size.x * 2.0 - 1.0, (size.y - positiveStep.y) / size.y * 2.0 - 1.0, 1.0, 1.0));

		for (uint i = 0; i < 4; i++) {
			frustumPlanes[i] = createPlaneEquation(p[i], p[(i+1)&3]);
		}
	}

	barrier();

	uint threadCount = WORK_GROUP_SIZE * WORK_GROUP_SIZE;
	uint passCount = (countLight + threadCount - 1) / threadCount;
	for (uint i = 0; i < passCount; ++i)
	{
		const uint lightIndex = i * threadCount + gl_LocalInvocationIndex;
		if (lightIndex >= countLight)
			break;

		vec4 position = vec4(lights[lightIndex].position, 1.0);
		float distance = 0.0;

		if ((getSignedDistFromPlane(position.xyz, frustumPlanes[0]) < lights[lightIndex].radius) &&
			(getSignedDistFromPlane(position.xyz, frustumPlanes[1]) < lights[lightIndex].radius) &&
			(getSignedDistFromPlane(position.xyz, frustumPlanes[2]) < lights[lightIndex].radius) &&
			(getSignedDistFromPlane(position.xyz, frustumPlanes[3]) < lights[lightIndex].radius) &&
			(-position.z + minDepth < lights[lightIndex].radius) && (position.z - maxDepth < lights[lightIndex].radius))
		{
			uint offset = atomicAdd(visibleLightCount, 1);
			visibleLightIndices[offset] = int(lightIndex);
		}
	}

	barrier();
	
	if (gl_LocalInvocationIndex == 0)
	{
		uint offset = index * MAX_LIGHT_COUNT;
		for (uint i = 0; i < visibleLightCount; i++)
			lightVisible[offset + i] = visibleLightIndices[i];

		if (visibleLightCount != MAX_LIGHT_COUNT)
			lightVisible[offset + visibleLightCount] = -1;
	}
	//vec4 pixel = vec4(minDepthInt, minDepthInt, minDepthInt, 1.0);
	vec4 pixel = vec4(visibleLightCount / float(countLight), visibleLightCount / float(countLight), visibleLightCount / float(countLight), 1.0);
	//float blue = clamp(float(visibleLightCount) / countLight, 0.0, 1.0);
	//float green = clamp(float(visibleLightCount) / countLight / 2, 0.0, 1.0);
	//float red = clamp(float(visibleLightCount) / countLight / 4, 0.0, 1.0);
	//vec4 pixel = vec4(red, green, blue, 1.0);
	//vec4 pixel = vec4(float(visibleLightCount) / 10.0, float(visibleLightCount) / 10.0, float(visibleLightCount) / 10.0, 1.0);
 
	ivec2 pixel_coords = ivec2(gl_WorkGroupID.xy);
	imageStore(img_output, pixel_coords, pixel);
}