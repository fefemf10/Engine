#version 460 core
#extension GL_ARB_compute_shader:           enable
#extension GL_ARB_shader_storage_buffer_object:     enable
#extension GL_ARB_compute_variable_group_size : enable
#define MAX_LIGHT_COUNT 1024
#define SCREEN_WIDTH 1280
#define SCREEN_HEIGHT 720
#define WORK_GROUP_SIZE 16
#define NUM_GROUPS_X (SCREEN_WIDTH / WORK_GROUP_SIZE)
#define NUM_GROUPS_Y (SCREEN_HEIGHT / WORK_GROUP_SIZE)

layout(std140, binding = 0) uniform BufferTransform
{
	mat4 projection;
	mat4 view;
};

struct Light {
    vec3 position;
	float radius;
    vec3 diffuse;
	float linear;
	float quadratic;
};

layout(std430, binding = 1) buffer BufferLight
{
	int countLight;
	Light lights[];
};

layout(std430, binding = 2) buffer BufferLightVisible
{ 
     int lightVisible[];
};

layout(rgba32f, binding = 4) uniform image2D img_output;

layout (binding = 0) uniform sampler2D gDepth; 

shared uint minDepthInt;
shared uint maxDepthInt;
shared uint visibleLightCount;
shared vec4 frustumPlanes[6];
shared int visibleLightIndices[MAX_LIGHT_COUNT];
shared float ldsZmin[WORK_GROUP_SIZE * WORK_GROUP_SIZE];
shared float ldsZmax[WORK_GROUP_SIZE * WORK_GROUP_SIZE];
shared mat4 viewProjection;
const vec2 screenSize = vec2(SCREEN_WIDTH, SCREEN_HEIGHT);
const float FLT_MAX = 1.0/0.0;

layout( local_size_variable ) in;

void main()
{
	ivec2 location = ivec2(gl_GlobalInvocationID.xy);
	ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
	uint index = tileID.y * tileNumber.x + tileID.x;
	vec2 sampleIdx = location * 2;
	if(gl_LocalInvocationIndex == 0)
	{
		minDepthInt = 0xFFFFFFFF;
		maxDepthInt = 0;
		visibleLightCount = 0;
		viewProjection = projection * view;
	}
	
	barrier();
	
	
	vec2 UV00 = sampleIdx / screenSize;
	vec2 UV01 = (sampleIdx + vec2(0.0, 1.0)) / screenSize;
	vec2 UV10 = (sampleIdx + vec2(1.0, 0.0)) / screenSize;
	vec2 UV11 = (sampleIdx + vec2(1.0, 1.0)) / screenSize;
	
	float depth00 = texture(gDepth, UV00).r;
	float depth01 = texture(gDepth, UV01).r;
	float depth10 = texture(gDepth, UV10).r;
	float depth11 = texture(gDepth, UV11).r;
	
	float z00 = (0.5 * projection[3][2]) / (depth00 + 0.5 * projection[2][2] - 0.5);
	float z01 = (0.5 * projection[3][2]) / (depth01 + 0.5 * projection[2][2] - 0.5);
	float z10 = (0.5 * projection[3][2]) / (depth10 + 0.5 * projection[2][2] - 0.5);
	float z11 = (0.5 * projection[3][2]) / (depth11 + 0.5 * projection[2][2] - 0.5);
	//depth = screenToView(vec4(location.x, location.y, depth, 1.0)).z;
	
	
	
	float minZ00 = (depth00 != 0.f) ? z00 : FLT_MAX;
	float minZ01 = (depth01 != 0.f) ? z01 : FLT_MAX;
	float minZ10 = (depth10 != 0.f) ? z10 : FLT_MAX;
	float minZ11 = (depth11 != 0.f) ? z11 : FLT_MAX;
	
	
	float maxZ00 = (depth00 != 0.f) ? z00 : 0.0;
	float maxZ01 = (depth01 != 0.f) ? z01 : 0.0;
	float maxZ10 = (depth10 != 0.f) ? z10 : 0.0;
	float maxZ11 = (depth11 != 0.f) ? z11 : 0.0;
	
	ldsZmin[gl_LocalInvocationIndex] = min(minZ00, min(minZ01, min(minZ10, minZ11)));
	ldsZmax[gl_LocalInvocationIndex] = max(maxZ00, max(maxZ01, max(maxZ10, maxZ11)));
	
	barrier();
	
	if (gl_LocalInvocationIndex < (WORK_GROUP_SIZE * WORK_GROUP_SIZE / 2))
	{
		ldsZmin[gl_LocalInvocationIndex] = min(ldsZmin[gl_LocalInvocationIndex], ldsZmin[gl_LocalInvocationIndex + 128]);
		ldsZmin[gl_LocalInvocationIndex] = min(ldsZmin[gl_LocalInvocationIndex], ldsZmin[gl_LocalInvocationIndex + 64]);
		ldsZmin[gl_LocalInvocationIndex] = min(ldsZmin[gl_LocalInvocationIndex], ldsZmin[gl_LocalInvocationIndex + 32]);
		ldsZmin[gl_LocalInvocationIndex] = min(ldsZmin[gl_LocalInvocationIndex], ldsZmin[gl_LocalInvocationIndex + 16]);
		ldsZmin[gl_LocalInvocationIndex] = min(ldsZmin[gl_LocalInvocationIndex], ldsZmin[gl_LocalInvocationIndex + 8]);
		ldsZmin[gl_LocalInvocationIndex] = min(ldsZmin[gl_LocalInvocationIndex], ldsZmin[gl_LocalInvocationIndex + 4]);
		ldsZmin[gl_LocalInvocationIndex] = min(ldsZmin[gl_LocalInvocationIndex], ldsZmin[gl_LocalInvocationIndex + 2]);
		ldsZmin[gl_LocalInvocationIndex] = min(ldsZmin[gl_LocalInvocationIndex], ldsZmin[gl_LocalInvocationIndex + 1]);
		
		ldsZmax[gl_LocalInvocationIndex] = max(ldsZmax[gl_LocalInvocationIndex], ldsZmax[gl_LocalInvocationIndex + 128]);
		ldsZmax[gl_LocalInvocationIndex] = max(ldsZmax[gl_LocalInvocationIndex], ldsZmax[gl_LocalInvocationIndex + 64]);
		ldsZmax[gl_LocalInvocationIndex] = max(ldsZmax[gl_LocalInvocationIndex], ldsZmax[gl_LocalInvocationIndex + 32]);
		ldsZmax[gl_LocalInvocationIndex] = max(ldsZmax[gl_LocalInvocationIndex], ldsZmax[gl_LocalInvocationIndex + 16]);
		ldsZmax[gl_LocalInvocationIndex] = max(ldsZmax[gl_LocalInvocationIndex], ldsZmax[gl_LocalInvocationIndex + 8]);
		ldsZmax[gl_LocalInvocationIndex] = max(ldsZmax[gl_LocalInvocationIndex], ldsZmax[gl_LocalInvocationIndex + 4]);
		ldsZmax[gl_LocalInvocationIndex] = max(ldsZmax[gl_LocalInvocationIndex], ldsZmax[gl_LocalInvocationIndex + 2]);
		ldsZmax[gl_LocalInvocationIndex] = max(ldsZmax[gl_LocalInvocationIndex], ldsZmax[gl_LocalInvocationIndex + 1]);
	}

	barrier();
	
	if (gl_LocalInvocationIndex == 0)
	{
		float maxDepth, minDepth;
		minDepth = ldsZmin[0];
		maxDepth = ldsZmax[0];

		vec2 negativeStep = (2.0 * vec2(tileID)) / vec2(tileNumber);
		vec2 positiveStep = (2.0 * vec2(tileID + ivec2(1, 1))) / vec2(tileNumber);

		frustumPlanes[0] = vec4(1.0, 0.0, 0.0, 1.0 - negativeStep.x); // Left
		frustumPlanes[1] = vec4(-1.0, 0.0, 0.0, -1.0 + positiveStep.x); // Right
		frustumPlanes[2] = vec4(0.0, 1.0, 0.0, 1.0 - negativeStep.y); // Bottom
		frustumPlanes[3] = vec4(0.0, -1.0, 0.0, -1.0 + positiveStep.y); // Top
		frustumPlanes[4] = vec4(0.0, 0.0, -1.0, -minDepth); // Near
		frustumPlanes[5] = vec4(0.0, 0.0, 1.0, maxDepth); // Far

		for (uint i = 0; i < 4; i++) {
			frustumPlanes[i] *= viewProjection;
			frustumPlanes[i] /= length(frustumPlanes[i].xyz);
		}

		frustumPlanes[4] *= view;
		frustumPlanes[4] /= length(frustumPlanes[4].xyz);
		frustumPlanes[5] *= view;
		frustumPlanes[5] /= length(frustumPlanes[5].xyz);
	}

	barrier();

	uint threadCount = WORK_GROUP_SIZE * WORK_GROUP_SIZE;
	uint passCount = (countLight + threadCount - 1) / threadCount;
	for (uint i = 0; i < passCount; ++i)
	{
		const uint lightIndex = i * threadCount + gl_LocalInvocationIndex;
		if (lightIndex >= countLight)
			break;

		vec4 position = vec4(lights[lightIndex].position, 1.0);
		float distance = 0.0;
		
		for (uint j = 0; j < 6; j++) {
			distance = dot(position, frustumPlanes[j]) + lights[lightIndex].radius;
			if (distance <= 0.0) {
				break;
			}
		}
		if (distance > 0.0) {
			uint offset = atomicAdd(visibleLightCount, 1);
			visibleLightIndices[offset] = int(lightIndex);
		}
	}

	barrier();
	
	if (gl_LocalInvocationIndex == 0)
	{
		uint offset = index * MAX_LIGHT_COUNT;
		for (uint i = 0; i < visibleLightCount; i++)
			lightVisible[offset + i] = visibleLightIndices[i];

		if (visibleLightCount != MAX_LIGHT_COUNT)
			lightVisible[offset + visibleLightCount] = -1;
	}
	//vec4 pixel = vec4(ldsZmax[0], ldsZmax[0], ldsZmax[0], 1.0);
	vec4 pixel = vec4(visibleLightCount / float(countLight), visibleLightCount / float(countLight), visibleLightCount / float(countLight), 1.0);
	//float blue = clamp(float(visibleLightCount) / countLight, 0.0, 1.0);
	//float green = clamp(float(visibleLightCount) / countLight / 2, 0.0, 1.0);
	//float red = clamp(float(visibleLightCount) / countLight / 4, 0.0, 1.0);
	//vec4 pixel = vec4(red, green, blue, 1.0);
	//vec4 pixel = vec4(float(visibleLightCount) / 10.0, float(visibleLightCount) / 10.0, float(visibleLightCount) / 10.0, 1.0);
 
	ivec2 pixel_coords = ivec2(gl_WorkGroupID.xy);
	imageStore(img_output, pixel_coords, pixel);
}